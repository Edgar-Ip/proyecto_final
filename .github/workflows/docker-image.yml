name: Deploy (Self-hosted + DB secrets -> .env)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create .env with DB secrets only
        shell: bash
        run: |
          set -euo pipefail
          ENV_PATH=".env"

          cat > "$ENV_PATH" <<EOF
# --- Database (from GitHub Secrets) ---
DB_HOST=${{ secrets.DB_HOST }}
DB_PORT=${{ secrets.DB_PORT }}
DB_NAME=${{ secrets.DB_NAME }}
DB_USER=${{ secrets.DB_USER }}
DB_PASSWORD=${{ secrets.DB_PASSWORD }}

# (Opcional) DSN para MySQL; cambia el esquema si usas Postgres u otro
# Ejemplos:
#   MySQL:    mysql+pymysql://USER:PASS@HOST:PORT/DB
#   Postgres: postgresql+psycopg2://USER:PASS@HOST:PORT/DB
DATABASE_URL=mysql+pymysql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}${{ secrets.DB_NAME && format('/{0}', secrets.DB_NAME) || '' }}
EOF

          # Defaults seguros si faltan (puedes quitarlos si prefieres fallar)
          # Asumimos MySQL por defecto; cambia a 5432 si usas Postgres
          sed -i 's/^DB_PORT=$/DB_PORT=3306/' "$ENV_PATH"

          # Validación mínima (requeridos)
          required_vars=(DB_HOST DB_USER DB_PASSWORD)
          for v in "${required_vars[@]}"; do
            if ! grep -q "^$v=" "$ENV_PATH"; then
              echo "::error::Falta $v en .env (agrega el secret $v)"
              exit 1
            fi
            val="$(grep "^$v=" "$ENV_PATH" | cut -d'=' -f2-)"
            if [[ -z "$val" ]]; then
              echo "::error::El secret $v está vacío"
              exit 1
            fi
          done

          chmod 600 "$ENV_PATH"

      - name: Build & Up with docker-compose
        shell: bash
        run: |
          set -e
          docker-compose down --remove-orphans || true
          docker-compose up -d --build
          docker-compose ps
          docker logs --tail 50 taxi_dashboard || true
